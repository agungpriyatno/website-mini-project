// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Customer {
  id        String   @id @default(cuid())
  name      String
  address  String
  gender    String
  orders    Order[]
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("customers")
}

model Order {
  id         String @id @default(cuid())
  customerId String @map("customer_id")

  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  totalPrice Float    @map("total_price")

  customer Customer       @relation(fields: [customerId], references: [id], onDelete: Cascade)
  products OrderProduct[]

  @@map("orders")
}

model Product {
  code      String   @id
  name      String
  price     Float
  category  String? 
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  orders OrderProduct[]

  @@map("products")
}

model OrderProduct {
  orderId     String  @map("order_id")
  productCode String  @map("product_code")
  quantity    Int
  totalPrice  Float  @map("total_price")
  order       Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product     Product @relation(fields: [productCode], references: [code], onDelete: Cascade)

  @@id([productCode, orderId])
  @@map("order_products")
}
